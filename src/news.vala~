struct Article {
    public string title;
    public string text;
}

Article[] fetch_news() {
    var youtube_page = File.new_for_uri("https://news.google.com/news/?ned=us&hl=en&output=rss");
    
    DataInputStream data_stream = null;
    try {
        data_stream = new DataInputStream(youtube_page.read());
    } catch(GLib.Error err) {
        stdout.puts(err.message);
        stdout.putc('\n');
        return null;
    }
    data_stream.set_byte_order(DataStreamByteOrder.LITTLE_ENDIAN);

    string line = null;
    var text = new StringBuilder();
    try {
        while((line = data_stream.read_line()) != null) {
            text.append(line);
            text.append_c('\n');
        }
    } catch(GLib.IOError err) {
        return null;
    }
    
    var str = text.str;

    int itemIndex = 0;
    Article[] articles = new Article[0];
    while((itemIndex = (int)str.index_of("<item>", itemIndex + 1)) != -1) {
        var startIndex = str.index_of("<title>", itemIndex) + "<title>".length;
        var endIndex = str.index_of("</", startIndex);
        var s = str.slice(startIndex, endIndex);
        
        // Scrape description
        var dStartIndex = str.index_of("<description>", itemIndex) + "<description>".length;
        var dEndIndex = str.index_of("</", dStartIndex);
        var dS = str.slice(dStartIndex, dEndIndex).replace("&quot;", "\"").replace("&#39;", "'").replace("&lt;", "<").replace("&gt;", ">").replace("&amp;", "&");
        
        // Find description inside of the html table inside of the description: look at the rss feed for yourself
        var eStartIndex = dS.index_of("</font><br><font size=\"-1\">") + "</font><br><font size=\"-1\">".length;
        var eEndIndex = dS.index_of("</", eStartIndex);
        var desc = dS.slice(eStartIndex, eEndIndex).replace("&nbsp;", " ").replace("<b>", "").replace("&#39;", "'");  

        Article article = {s, desc};
        articles += article;
    }
    return articles;
}

int main (string args[]) {
    Gtk.init(ref args);

    Article[] s = fetch_news();

    var window = new Gtk.Window();
    window.title = "News";
    window.set_border_width(12);
    window.set_position(Gtk.WindowPosition.CENTER);
    window.set_default_size(1550, 950);
    window.destroy.connect(Gtk.main_quit);

    var grid = new Gtk.Box(Gtk.Orientation.VERTICAL, 0);
    
    if(s == null) {
        grid.add(new Gtk.Label("An error occured."));
    } /*else foreach (Article article in s) {
        var label = new Gtk.Label(null);
        label.set_markup("<b>" + article.title + "</b>");
        label.set_line_wrap(true);
        grid.add(label);

        /*var desc = new Gtk.Label(article.text);
        desc.set_line_wrap(true);
        grid.add(desc); /
    }*/

    foreach(var article in s) {
        var label2 = new Gtk.Label(article.title);
        label2.set_markup("<b>" + article.title + "</b>");
        label2.set_line_wrap(true);
        grid.add(label2);

        var label = new Gtk.Label(null);
        label.set_markup(article.text);
        label.override_background_color(Gtk.StateFlags.NORMAL, new Gdk.RGBA().parse("#EEE"));
        label.set_line_wrap(true);
        grid.add(label);
    }
    window.add(grid);
    window.show_all();

        window.resize(950, 950);

    Gtk.main();
    return 0;
}
